@prefix : <https://quangis.github.io/vocab/tool#> .
@prefix cct: <https://quangis.github.io/cct#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl: <http://www.w3.org/2002/07/owl#> .

:Tool a rdfs:Class;
    rdfs:comment """In the present context, a tool can refer both to actual 
    implementations of tools and to their abstractions, because both can be 
    used as tools in an abstract sense.""".

:Implementation a rdfs:Class; rdfs:subClassOf :Tool;
    rdfs:comment """An implementation of a concrete tool or a collection of 
    such tools.""".

:Unit a rdfs:Class; rdfs:subClassOf :Implementation;
    owl:equivalentClass :ConcreteTool;
    rdfs:comment """A tool unit is a reference to a concrete tool, as actually 
    implemented in programs like ArcGIS or QGIS.""".

:Multi a rdfs:Class; rdfs:subClassOf :Implementation;
    owl:equivalentClass :Supertool;
    rdfs:comment """A composite tool (also known as a supertool) is a workflow, 
    or more properly, a workflow schema: an ensemble of concrete tools that can 
    only *collectively* act as an implementation for an abstraction.""";
    rdfs:subClassOf [
        a owl:Restriction; owl:onProperty :action;
        owl:minQualifiedCardinality 2
    ].

:Abstraction a rdfs:Class; rdfs:subClassOf :Tool;
    rdfs:comment """A tool abstraction contains a syntactic and semantic 
    signature of a tool, to be associated with an implementation of such a 
    tool. These signatures contain information on the format of the input and 
    output (in terms of core concept datatypes), and information on the purpose 
    (in terms of a CCT expression).

    A single abstraction may have multiple implementations, because, for 
    example, a tool could be implemented in both QGIS and ArcGIS. Conversely, 
    multiple abstractions may have the same implementation, if it can be used 
    in multiple contexts, in the same way that a hammer can be used both to 
    drive a nail into a plank of wood or to break a piggy bank.

    An abstraction can itself be used as an abstract 'tool' of sorts, to be 
    used in workflow synthesis.

    If an abstraction is given an rdfs:comment, this must be in the abstract, 
    ie. without reference to the specific data that may have been used in an 
    action.""";
    rdfs:subClassOf [
        a owl:Restriction; owl:onProperty :input;
        owl:minQualifiedCardinality 1
    ], [
        a owl:Restriction; owl:onProperty :implementation;
        owl:minQualifiedCardinality 1
    ], [
        a owl:Restriction; owl:onProperty :output;
        owl:minQualifiedCardinality 1; owl:maxQualifiedCardinality 1
    ], [
        a owl:Restriction; owl:onProperty cct:expression;
        owl:minQualifiedCardinality 1; owl:maxQualifiedCardinality 1
    ].

:Action a rdfs:Class;
    rdfs:comment """An action is an *application* of an implementation. In the 
    context of a composite tool (ie. a supertool), these applications are not 
    yet actualized.""";
    rdfs:subClassOf [
        a owl:Restriction; owl:onProperty :apply;
        owl:minQualifiedCardinality 1; owl:maxQualifiedCardinality 1
    ], [
        a owl:Restriction; owl:onProperty :input;
        owl:minQualifiedCardinality 1;
    ], [
        a owl:Restriction; owl:onProperty :output;
        owl:minQualifiedCardinality 1; owl:maxQualifiedCardinality 1
    ].

:Artefact a rdfs:Class;
    rdfs:comment """A single unit of data: either source data or data that is 
    the output of an action. In the context of tool descriptions, an artefact 
    is 'schematic': it doesn't refer to actualized data, but should be 
    interpreted like a variable (as opposed to the context of a workflow, in 
    which an artefact really is concrete).

    When used in tool abstractions, artefacts should be associated with one or 
    more types from the `ccd:` namespace as their `rdf:type`. This provides the 
    CCD signature.

    Artefacts that are input to a tool must be labeled with an `:id`. Artefacts 
    that are outputs, or that occur as intermediates in a composite tool, must 
    not be.""".

:id a rdfs:Property;
    rdfs:domain :Artefact;
    rdfs:range rdfs:Literal.

:input a rdfs:Property;
    rdfs:domain :Tool, :Action;
    rdfs:range :Artefact.

:output a rdfs:Property;
    rdfs:domain :Tool, :Action;
    rdfs:range :Artefact.

:action a rdfs:Property;
    rdfs:domain :Composite;
    rdfs:range :Action.

:apply a rdfs:Property;
    rdfs:domain :Action;
    rdfs:range :Unit.

:implementation a rdfs:Property;
    rdfs:domain :Abstraction;
    rdfs:range :Implementation;
    owl:inverseOf :implements.

:implements a rdfs:Property;
    rdfs:domain :Implementation;
    rdfs:range :Abstraction;
    owl:inverseOf :implementation.
